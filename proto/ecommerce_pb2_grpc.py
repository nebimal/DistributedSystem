# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ecommerce_pb2 as ecommerce__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ecommerce_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UserServiceStub(object):
    """User Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/ecommerce.UserService/RegisterUser',
                request_serializer=ecommerce__pb2.User.SerializeToString,
                response_deserializer=ecommerce__pb2.UserResponse.FromString,
                _registered_method=True)
        self.LoginUser = channel.unary_unary(
                '/ecommerce.UserService/LoginUser',
                request_serializer=ecommerce__pb2.LoginRequest.SerializeToString,
                response_deserializer=ecommerce__pb2.UserResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/ecommerce.UserService/GetUser',
                request_serializer=ecommerce__pb2.UserRequest.SerializeToString,
                response_deserializer=ecommerce__pb2.User.FromString,
                _registered_method=True)


class UserServiceServicer(object):
    """User Service
    """

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=ecommerce__pb2.User.FromString,
                    response_serializer=ecommerce__pb2.UserResponse.SerializeToString,
            ),
            'LoginUser': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginUser,
                    request_deserializer=ecommerce__pb2.LoginRequest.FromString,
                    response_serializer=ecommerce__pb2.UserResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=ecommerce__pb2.UserRequest.FromString,
                    response_serializer=ecommerce__pb2.User.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ecommerce.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ecommerce.UserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """User Service
    """

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.UserService/RegisterUser',
            ecommerce__pb2.User.SerializeToString,
            ecommerce__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoginUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.UserService/LoginUser',
            ecommerce__pb2.LoginRequest.SerializeToString,
            ecommerce__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.UserService/GetUser',
            ecommerce__pb2.UserRequest.SerializeToString,
            ecommerce__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ProductServiceStub(object):
    """Product Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProduct = channel.unary_unary(
                '/ecommerce.ProductService/GetProduct',
                request_serializer=ecommerce__pb2.ProductRequest.SerializeToString,
                response_deserializer=ecommerce__pb2.Product.FromString,
                _registered_method=True)
        self.GetAllProducts = channel.unary_unary(
                '/ecommerce.ProductService/GetAllProducts',
                request_serializer=ecommerce__pb2.Empty.SerializeToString,
                response_deserializer=ecommerce__pb2.ProductList.FromString,
                _registered_method=True)
        self.AddProduct = channel.unary_unary(
                '/ecommerce.ProductService/AddProduct',
                request_serializer=ecommerce__pb2.Product.SerializeToString,
                response_deserializer=ecommerce__pb2.ProductResponse.FromString,
                _registered_method=True)
        self.UpdateProduct = channel.unary_unary(
                '/ecommerce.ProductService/UpdateProduct',
                request_serializer=ecommerce__pb2.Product.SerializeToString,
                response_deserializer=ecommerce__pb2.ProductResponse.FromString,
                _registered_method=True)


class ProductServiceServicer(object):
    """Product Service
    """

    def GetProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllProducts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProductServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProduct,
                    request_deserializer=ecommerce__pb2.ProductRequest.FromString,
                    response_serializer=ecommerce__pb2.Product.SerializeToString,
            ),
            'GetAllProducts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllProducts,
                    request_deserializer=ecommerce__pb2.Empty.FromString,
                    response_serializer=ecommerce__pb2.ProductList.SerializeToString,
            ),
            'AddProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.AddProduct,
                    request_deserializer=ecommerce__pb2.Product.FromString,
                    response_serializer=ecommerce__pb2.ProductResponse.SerializeToString,
            ),
            'UpdateProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProduct,
                    request_deserializer=ecommerce__pb2.Product.FromString,
                    response_serializer=ecommerce__pb2.ProductResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ecommerce.ProductService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ecommerce.ProductService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProductService(object):
    """Product Service
    """

    @staticmethod
    def GetProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.ProductService/GetProduct',
            ecommerce__pb2.ProductRequest.SerializeToString,
            ecommerce__pb2.Product.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllProducts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.ProductService/GetAllProducts',
            ecommerce__pb2.Empty.SerializeToString,
            ecommerce__pb2.ProductList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.ProductService/AddProduct',
            ecommerce__pb2.Product.SerializeToString,
            ecommerce__pb2.ProductResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.ProductService/UpdateProduct',
            ecommerce__pb2.Product.SerializeToString,
            ecommerce__pb2.ProductResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OrderServiceStub(object):
    """Order Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrder = channel.unary_unary(
                '/ecommerce.OrderService/CreateOrder',
                request_serializer=ecommerce__pb2.Order.SerializeToString,
                response_deserializer=ecommerce__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.GetOrder = channel.unary_unary(
                '/ecommerce.OrderService/GetOrder',
                request_serializer=ecommerce__pb2.OrderRequest.SerializeToString,
                response_deserializer=ecommerce__pb2.Order.FromString,
                _registered_method=True)
        self.GetUserOrders = channel.unary_unary(
                '/ecommerce.OrderService/GetUserOrders',
                request_serializer=ecommerce__pb2.UserOrdersRequest.SerializeToString,
                response_deserializer=ecommerce__pb2.OrderList.FromString,
                _registered_method=True)
        self.UpdateOrderStatus = channel.unary_unary(
                '/ecommerce.OrderService/UpdateOrderStatus',
                request_serializer=ecommerce__pb2.OrderStatusUpdate.SerializeToString,
                response_deserializer=ecommerce__pb2.OrderResponse.FromString,
                _registered_method=True)


class OrderServiceServicer(object):
    """Order Service
    """

    def CreateOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOrderStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrder,
                    request_deserializer=ecommerce__pb2.Order.FromString,
                    response_serializer=ecommerce__pb2.OrderResponse.SerializeToString,
            ),
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=ecommerce__pb2.OrderRequest.FromString,
                    response_serializer=ecommerce__pb2.Order.SerializeToString,
            ),
            'GetUserOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserOrders,
                    request_deserializer=ecommerce__pb2.UserOrdersRequest.FromString,
                    response_serializer=ecommerce__pb2.OrderList.SerializeToString,
            ),
            'UpdateOrderStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOrderStatus,
                    request_deserializer=ecommerce__pb2.OrderStatusUpdate.FromString,
                    response_serializer=ecommerce__pb2.OrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ecommerce.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ecommerce.OrderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """Order Service
    """

    @staticmethod
    def CreateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.OrderService/CreateOrder',
            ecommerce__pb2.Order.SerializeToString,
            ecommerce__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.OrderService/GetOrder',
            ecommerce__pb2.OrderRequest.SerializeToString,
            ecommerce__pb2.Order.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.OrderService/GetUserOrders',
            ecommerce__pb2.UserOrdersRequest.SerializeToString,
            ecommerce__pb2.OrderList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateOrderStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.OrderService/UpdateOrderStatus',
            ecommerce__pb2.OrderStatusUpdate.SerializeToString,
            ecommerce__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CartServiceStub(object):
    """Cart Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddToCart = channel.unary_unary(
                '/ecommerce.CartService/AddToCart',
                request_serializer=ecommerce__pb2.CartItem.SerializeToString,
                response_deserializer=ecommerce__pb2.CartResponse.FromString,
                _registered_method=True)
        self.GetCart = channel.unary_unary(
                '/ecommerce.CartService/GetCart',
                request_serializer=ecommerce__pb2.CartRequest.SerializeToString,
                response_deserializer=ecommerce__pb2.Cart.FromString,
                _registered_method=True)
        self.RemoveFromCart = channel.unary_unary(
                '/ecommerce.CartService/RemoveFromCart',
                request_serializer=ecommerce__pb2.CartItem.SerializeToString,
                response_deserializer=ecommerce__pb2.CartResponse.FromString,
                _registered_method=True)
        self.ClearCart = channel.unary_unary(
                '/ecommerce.CartService/ClearCart',
                request_serializer=ecommerce__pb2.CartRequest.SerializeToString,
                response_deserializer=ecommerce__pb2.CartResponse.FromString,
                _registered_method=True)


class CartServiceServicer(object):
    """Cart Service
    """

    def AddToCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveFromCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CartServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddToCart': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToCart,
                    request_deserializer=ecommerce__pb2.CartItem.FromString,
                    response_serializer=ecommerce__pb2.CartResponse.SerializeToString,
            ),
            'GetCart': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCart,
                    request_deserializer=ecommerce__pb2.CartRequest.FromString,
                    response_serializer=ecommerce__pb2.Cart.SerializeToString,
            ),
            'RemoveFromCart': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveFromCart,
                    request_deserializer=ecommerce__pb2.CartItem.FromString,
                    response_serializer=ecommerce__pb2.CartResponse.SerializeToString,
            ),
            'ClearCart': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearCart,
                    request_deserializer=ecommerce__pb2.CartRequest.FromString,
                    response_serializer=ecommerce__pb2.CartResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ecommerce.CartService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ecommerce.CartService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CartService(object):
    """Cart Service
    """

    @staticmethod
    def AddToCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.CartService/AddToCart',
            ecommerce__pb2.CartItem.SerializeToString,
            ecommerce__pb2.CartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.CartService/GetCart',
            ecommerce__pb2.CartRequest.SerializeToString,
            ecommerce__pb2.Cart.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveFromCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.CartService/RemoveFromCart',
            ecommerce__pb2.CartItem.SerializeToString,
            ecommerce__pb2.CartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ecommerce.CartService/ClearCart',
            ecommerce__pb2.CartRequest.SerializeToString,
            ecommerce__pb2.CartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
